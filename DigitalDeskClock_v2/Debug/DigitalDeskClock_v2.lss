
DigitalDeskClock_v2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000028  00800100  00000b10  00000ba4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b10  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001b  00800128  00800128  00000bcc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000bcc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000bfc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001f0  00000000  00000000  00000c3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000399f  00000000  00000000  00000e2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000010e9  00000000  00000000  000047cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000fa0  00000000  00000000  000058b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000678  00000000  00000000  00006854  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000010ac  00000000  00000000  00006ecc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000221e  00000000  00000000  00007f78  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001d8  00000000  00000000  0000a196  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 35 00 	jmp	0x6a	; 0x6a <__ctors_end>
   4:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   8:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  10:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  14:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  18:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  1c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  20:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  24:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  28:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  2c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  30:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  34:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  38:	0c 94 98 03 	jmp	0x730	; 0x730 <__vector_14>
  3c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  40:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  44:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  48:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  4c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  50:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  54:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  58:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  5c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  60:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  64:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>

00000068 <__ctors_start>:
  68:	65 04       	cpc	r6, r5

0000006a <__ctors_end>:
  6a:	11 24       	eor	r1, r1
  6c:	1f be       	out	0x3f, r1	; 63
  6e:	cf ef       	ldi	r28, 0xFF	; 255
  70:	d8 e0       	ldi	r29, 0x08	; 8
  72:	de bf       	out	0x3e, r29	; 62
  74:	cd bf       	out	0x3d, r28	; 61

00000076 <__do_copy_data>:
  76:	11 e0       	ldi	r17, 0x01	; 1
  78:	a0 e0       	ldi	r26, 0x00	; 0
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	e0 e1       	ldi	r30, 0x10	; 16
  7e:	fb e0       	ldi	r31, 0x0B	; 11
  80:	02 c0       	rjmp	.+4      	; 0x86 <__do_copy_data+0x10>
  82:	05 90       	lpm	r0, Z+
  84:	0d 92       	st	X+, r0
  86:	a8 32       	cpi	r26, 0x28	; 40
  88:	b1 07       	cpc	r27, r17
  8a:	d9 f7       	brne	.-10     	; 0x82 <__do_copy_data+0xc>

0000008c <__do_clear_bss>:
  8c:	21 e0       	ldi	r18, 0x01	; 1
  8e:	a8 e2       	ldi	r26, 0x28	; 40
  90:	b1 e0       	ldi	r27, 0x01	; 1
  92:	01 c0       	rjmp	.+2      	; 0x96 <.do_clear_bss_start>

00000094 <.do_clear_bss_loop>:
  94:	1d 92       	st	X+, r1

00000096 <.do_clear_bss_start>:
  96:	a3 34       	cpi	r26, 0x43	; 67
  98:	b2 07       	cpc	r27, r18
  9a:	e1 f7       	brne	.-8      	; 0x94 <.do_clear_bss_loop>

0000009c <__do_global_ctors>:
  9c:	10 e0       	ldi	r17, 0x00	; 0
  9e:	c5 e3       	ldi	r28, 0x35	; 53
  a0:	d0 e0       	ldi	r29, 0x00	; 0
  a2:	04 c0       	rjmp	.+8      	; 0xac <__do_global_ctors+0x10>
  a4:	21 97       	sbiw	r28, 0x01	; 1
  a6:	fe 01       	movw	r30, r28
  a8:	0e 94 80 05 	call	0xb00	; 0xb00 <__tablejump2__>
  ac:	c4 33       	cpi	r28, 0x34	; 52
  ae:	d1 07       	cpc	r29, r17
  b0:	c9 f7       	brne	.-14     	; 0xa4 <__do_global_ctors+0x8>
  b2:	0e 94 31 04 	call	0x862	; 0x862 <main>
  b6:	0c 94 86 05 	jmp	0xb0c	; 0xb0c <_exit>

000000ba <__bad_interrupt>:
  ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000be <_ZN6DS32314ReadEhPhh>:
    t[0] = Day & 0b0111;
    t[1] = ((Date / 10) << 4) | (Date % 10);
    t[2] = ((Year / 100) << 7) | ((Month / 10) << 4) | (Month % 10);
    t[3] = ((Year / 10) << 4) | (Year % 10);
    return (Write(DS3231_REG_DAY, t, 4));
}
  be:	cf 92       	push	r12
  c0:	df 92       	push	r13
  c2:	ef 92       	push	r14
  c4:	ff 92       	push	r15
  c6:	0f 93       	push	r16
  c8:	1f 93       	push	r17
  ca:	cf 93       	push	r28
  cc:	df 93       	push	r29
  ce:	1f 92       	push	r1
  d0:	cd b7       	in	r28, 0x3d	; 61
  d2:	de b7       	in	r29, 0x3e	; 62
  d4:	69 83       	std	Y+1, r22	; 0x01
  d6:	dc 01       	movw	r26, r24
  d8:	8d 91       	ld	r24, X+
  da:	9c 91       	ld	r25, X
  dc:	e2 2e       	mov	r14, r18
  de:	f1 2c       	mov	r15, r1
  e0:	dc 01       	movw	r26, r24
  e2:	ed 91       	ld	r30, X+
  e4:	fc 91       	ld	r31, X
  e6:	04 88       	ldd	r0, Z+20	; 0x14
  e8:	f5 89       	ldd	r31, Z+21	; 0x15
  ea:	e0 2d       	mov	r30, r0
  ec:	0f 2e       	mov	r0, r31
  ee:	f4 e6       	ldi	r31, 0x64	; 100
  f0:	cf 2e       	mov	r12, r31
  f2:	d1 2c       	mov	r13, r1
  f4:	f0 2d       	mov	r31, r0
  f6:	8a 01       	movw	r16, r20
  f8:	21 e0       	ldi	r18, 0x01	; 1
  fa:	ae 01       	movw	r20, r28
  fc:	4f 5f       	subi	r20, 0xFF	; 255
  fe:	5f 4f       	sbci	r21, 0xFF	; 255
 100:	60 ed       	ldi	r22, 0xD0	; 208
 102:	09 95       	icall
 104:	0f 90       	pop	r0
 106:	df 91       	pop	r29
 108:	cf 91       	pop	r28
 10a:	1f 91       	pop	r17
 10c:	0f 91       	pop	r16
 10e:	ff 90       	pop	r15
 110:	ef 90       	pop	r14
 112:	df 90       	pop	r13
 114:	cf 90       	pop	r12
 116:	08 95       	ret

00000118 <_ZN6DS32317GetTimeEPhS0_S0_>:

uint8_t DS3231::GetTime(uint8_t *Sec, uint8_t *Min, uint8_t *Hour) {
 118:	cf 92       	push	r12
 11a:	df 92       	push	r13
 11c:	ef 92       	push	r14
 11e:	ff 92       	push	r15
 120:	0f 93       	push	r16
 122:	1f 93       	push	r17
 124:	cf 93       	push	r28
 126:	df 93       	push	r29
 128:	00 d0       	rcall	.+0      	; 0x12a <_ZN6DS32317GetTimeEPhS0_S0_+0x12>
 12a:	1f 92       	push	r1
 12c:	cd b7       	in	r28, 0x3d	; 61
 12e:	de b7       	in	r29, 0x3e	; 62
 130:	6b 01       	movw	r12, r22
 132:	7a 01       	movw	r14, r20
 134:	89 01       	movw	r16, r18
    uint8_t t[3];
    uint8_t status = Read(DS3231_REG_SECONDS, t, 3);
 136:	23 e0       	ldi	r18, 0x03	; 3
 138:	ae 01       	movw	r20, r28
 13a:	4f 5f       	subi	r20, 0xFF	; 255
 13c:	5f 4f       	sbci	r21, 0xFF	; 255
 13e:	60 e0       	ldi	r22, 0x00	; 0
 140:	0e 94 5f 00 	call	0xbe	; 0xbe <_ZN6DS32314ReadEhPhh>
    *Sec = ((t[0] >> 4) * 10) + (t[0] & 0x0F);
 144:	99 81       	ldd	r25, Y+1	; 0x01
 146:	29 2f       	mov	r18, r25
 148:	26 95       	lsr	r18
 14a:	26 95       	lsr	r18
 14c:	26 95       	lsr	r18
 14e:	2e 71       	andi	r18, 0x1E	; 30
 150:	32 2f       	mov	r19, r18
 152:	33 0f       	add	r19, r19
 154:	33 0f       	add	r19, r19
 156:	23 0f       	add	r18, r19
 158:	9f 70       	andi	r25, 0x0F	; 15
 15a:	92 0f       	add	r25, r18
 15c:	f6 01       	movw	r30, r12
 15e:	90 83       	st	Z, r25
    *Min = ((t[1] >> 4) * 10) + (t[1] & 0x0F);
 160:	9a 81       	ldd	r25, Y+2	; 0x02
 162:	29 2f       	mov	r18, r25
 164:	26 95       	lsr	r18
 166:	26 95       	lsr	r18
 168:	26 95       	lsr	r18
 16a:	2e 71       	andi	r18, 0x1E	; 30
 16c:	32 2f       	mov	r19, r18
 16e:	33 0f       	add	r19, r19
 170:	33 0f       	add	r19, r19
 172:	23 0f       	add	r18, r19
 174:	9f 70       	andi	r25, 0x0F	; 15
 176:	92 0f       	add	r25, r18
 178:	f7 01       	movw	r30, r14
 17a:	90 83       	st	Z, r25
    *Hour = ((t[2] >> 4) * 10) + (t[2] & 0x0F);
 17c:	9b 81       	ldd	r25, Y+3	; 0x03
 17e:	29 2f       	mov	r18, r25
 180:	26 95       	lsr	r18
 182:	26 95       	lsr	r18
 184:	26 95       	lsr	r18
 186:	2e 71       	andi	r18, 0x1E	; 30
 188:	32 2f       	mov	r19, r18
 18a:	33 0f       	add	r19, r19
 18c:	33 0f       	add	r19, r19
 18e:	23 0f       	add	r18, r19
 190:	9f 70       	andi	r25, 0x0F	; 15
 192:	92 0f       	add	r25, r18
 194:	f8 01       	movw	r30, r16
 196:	90 83       	st	Z, r25
    return (status);
}
 198:	0f 90       	pop	r0
 19a:	0f 90       	pop	r0
 19c:	0f 90       	pop	r0
 19e:	df 91       	pop	r29
 1a0:	cf 91       	pop	r28
 1a2:	1f 91       	pop	r17
 1a4:	0f 91       	pop	r16
 1a6:	ff 90       	pop	r15
 1a8:	ef 90       	pop	r14
 1aa:	df 90       	pop	r13
 1ac:	cf 90       	pop	r12
 1ae:	08 95       	ret

000001b0 <_ZN9I2CPeriph13GenerateStartEv>:
#include "I2CHandle.h"

struct I2CPeriph : public I2CHandleTypeDef {
public:
	void Init(I2CInitTypeDef*);
	inline void GenerateStart() {TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN) | (twieBit << TWIE);}
 1b0:	fc 01       	movw	r30, r24
 1b2:	82 81       	ldd	r24, Z+2	; 0x02
 1b4:	84 6a       	ori	r24, 0xA4	; 164
 1b6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 1ba:	08 95       	ret

000001bc <_ZN9I2CPeriph12GenerateStopEv>:
	inline void GenerateStop() {TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO) | (twieBit << TWIE); }
 1bc:	fc 01       	movw	r30, r24
 1be:	82 81       	ldd	r24, Z+2	; 0x02
 1c0:	84 69       	ori	r24, 0x94	; 148
 1c2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 1c6:	08 95       	ret

000001c8 <_ZN9I2CPeriph8TransmitEh>:
	inline void Transmit(uint8_t data) {TWDR = data;	TWCR = (1 << TWINT) | (1 << TWEN) | (twieBit << TWIE); }
 1c8:	60 93 bb 00 	sts	0x00BB, r22	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
 1cc:	fc 01       	movw	r30, r24
 1ce:	82 81       	ldd	r24, Z+2	; 0x02
 1d0:	84 68       	ori	r24, 0x84	; 132
 1d2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 1d6:	08 95       	ret

000001d8 <_ZN9I2CPeriph6SetACKEh>:
	inline void SetACK(uint8_t ack) {tweaBit = ack & 1;}
 1d8:	61 70       	andi	r22, 0x01	; 1
 1da:	fc 01       	movw	r30, r24
 1dc:	63 83       	std	Z+3, r22	; 0x03
 1de:	08 95       	ret

000001e0 <_ZN9I2CPeriph7ReceiveEv>:
	inline uint8_t Receive()
 1e0:	fc 01       	movw	r30, r24
		{uint8_t data = TWDR; TWCR = (1 << TWINT) | (twieBit << TWIE) | (tweaBit << TWEA) | (1 << TWEN); return (data);}
 1e2:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
 1e6:	23 81       	ldd	r18, Z+3	; 0x03
 1e8:	90 e4       	ldi	r25, 0x40	; 64
 1ea:	29 9f       	mul	r18, r25
 1ec:	90 01       	movw	r18, r0
 1ee:	11 24       	eor	r1, r1
 1f0:	92 81       	ldd	r25, Z+2	; 0x02
 1f2:	94 68       	ori	r25, 0x84	; 132
 1f4:	29 2b       	or	r18, r25
 1f6:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 1fa:	08 95       	ret

000001fc <_ZN9I2CPeriph16IsStartConditionEv>:
	inline uint8_t IsStartCondition() {return (((TWSR & 0xF8) == TW_START) | ((TWSR & 0xF8) == TW_REP_START));}
 1fc:	e9 eb       	ldi	r30, 0xB9	; 185
 1fe:	f0 e0       	ldi	r31, 0x00	; 0
 200:	20 81       	ld	r18, Z
 202:	90 81       	ld	r25, Z
 204:	28 7f       	andi	r18, 0xF8	; 248
 206:	31 e0       	ldi	r19, 0x01	; 1
 208:	28 30       	cpi	r18, 0x08	; 8
 20a:	09 f0       	breq	.+2      	; 0x20e <_ZN9I2CPeriph16IsStartConditionEv+0x12>
 20c:	30 e0       	ldi	r19, 0x00	; 0
 20e:	98 7f       	andi	r25, 0xF8	; 248
 210:	81 e0       	ldi	r24, 0x01	; 1
 212:	90 31       	cpi	r25, 0x10	; 16
 214:	09 f0       	breq	.+2      	; 0x218 <_ZN9I2CPeriph16IsStartConditionEv+0x1c>
 216:	80 e0       	ldi	r24, 0x00	; 0
 218:	83 2b       	or	r24, r19
 21a:	08 95       	ret

0000021c <_ZN9I2CPeriph22IsTransmissionCompleteEv>:
	inline uint8_t IsTransmissionComplete() {return (TWCR & (1 << TWINT));}
 21c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 220:	80 78       	andi	r24, 0x80	; 128
 222:	08 95       	ret

00000224 <_ZN9I2CPeriph6IsBusyEv>:
	inline uint8_t IsBusy() {return (TWSR & (1 << TWSTO));}
 224:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
 228:	80 71       	andi	r24, 0x10	; 16
 22a:	08 95       	ret

0000022c <_ZN9I2CPeriph5IsACKEv>:
	inline uint8_t IsACK() {
		return (((TWSR & 0xF8) == TW_MT_SLA_ACK) | ((TWSR & 0xF8) == TW_MT_DATA_ACK) | ((TWSR & 0xF8) == TW_MR_SLA_ACK));}
 22c:	e9 eb       	ldi	r30, 0xB9	; 185
 22e:	f0 e0       	ldi	r31, 0x00	; 0
 230:	30 81       	ld	r19, Z
 232:	20 81       	ld	r18, Z
 234:	90 81       	ld	r25, Z
 236:	38 7f       	andi	r19, 0xF8	; 248
 238:	41 e0       	ldi	r20, 0x01	; 1
 23a:	38 31       	cpi	r19, 0x18	; 24
 23c:	09 f0       	breq	.+2      	; 0x240 <_ZN9I2CPeriph5IsACKEv+0x14>
 23e:	40 e0       	ldi	r20, 0x00	; 0
 240:	28 7f       	andi	r18, 0xF8	; 248
 242:	81 e0       	ldi	r24, 0x01	; 1
 244:	28 32       	cpi	r18, 0x28	; 40
 246:	09 f0       	breq	.+2      	; 0x24a <_ZN9I2CPeriph5IsACKEv+0x1e>
 248:	80 e0       	ldi	r24, 0x00	; 0
 24a:	84 2b       	or	r24, r20
 24c:	98 7f       	andi	r25, 0xF8	; 248
 24e:	21 e0       	ldi	r18, 0x01	; 1
 250:	90 34       	cpi	r25, 0x40	; 64
 252:	09 f0       	breq	.+2      	; 0x256 <_ZN9I2CPeriph5IsACKEv+0x2a>
 254:	20 e0       	ldi	r18, 0x00	; 0
 256:	82 2b       	or	r24, r18
 258:	08 95       	ret

0000025a <_ZN9I2CPeriph4InitEP14I2CInitTypeDef>:
#include "I2CPeriph.h"

void I2CPeriph::Init(I2CInitTypeDef *i2cInit) {
 25a:	0f 93       	push	r16
 25c:	1f 93       	push	r17
 25e:	cf 93       	push	r28
 260:	df 93       	push	r29
 262:	8c 01       	movw	r16, r24
 264:	eb 01       	movw	r28, r22
    cpuFreq = i2cInit->CPUFreq;
 266:	88 81       	ld	r24, Y
 268:	99 81       	ldd	r25, Y+1	; 0x01
 26a:	aa 81       	ldd	r26, Y+2	; 0x02
 26c:	bb 81       	ldd	r27, Y+3	; 0x03
 26e:	f8 01       	movw	r30, r16
 270:	84 83       	std	Z+4, r24	; 0x04
 272:	95 83       	std	Z+5, r25	; 0x05
 274:	a6 83       	std	Z+6, r26	; 0x06
 276:	b7 83       	std	Z+7, r27	; 0x07
    TWBR = (i2cInit->CPUFreq / i2cInit->SCLFreq - 16) / 2;
 278:	68 81       	ld	r22, Y
 27a:	79 81       	ldd	r23, Y+1	; 0x01
 27c:	8a 81       	ldd	r24, Y+2	; 0x02
 27e:	9b 81       	ldd	r25, Y+3	; 0x03
 280:	2c 81       	ldd	r18, Y+4	; 0x04
 282:	3d 81       	ldd	r19, Y+5	; 0x05
 284:	4e 81       	ldd	r20, Y+6	; 0x06
 286:	5f 81       	ldd	r21, Y+7	; 0x07
 288:	0e 94 5e 05 	call	0xabc	; 0xabc <__udivmodsi4>
 28c:	da 01       	movw	r26, r20
 28e:	c9 01       	movw	r24, r18
 290:	40 97       	sbiw	r24, 0x10	; 16
 292:	a1 09       	sbc	r26, r1
 294:	b1 09       	sbc	r27, r1
 296:	b6 95       	lsr	r27
 298:	a7 95       	ror	r26
 29a:	97 95       	ror	r25
 29c:	87 95       	ror	r24
 29e:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
    TWSR = (0 << TWPS1) | (0 << TWPS0);
 2a2:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
    TWAR = (i2cInit->OwnAddress & 0b11111110) | (i2cInit->GeneralCallEnable & 1);
 2a6:	88 85       	ldd	r24, Y+8	; 0x08
 2a8:	98 2f       	mov	r25, r24
 2aa:	9e 7f       	andi	r25, 0xFE	; 254
 2ac:	89 85       	ldd	r24, Y+9	; 0x09
 2ae:	81 70       	andi	r24, 0x01	; 1
 2b0:	89 2b       	or	r24, r25
 2b2:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <__DATA_REGION_ORIGIN__+0x5a>
    twieBit = i2cInit->InterruptEnable;
 2b6:	8a 85       	ldd	r24, Y+10	; 0x0a
 2b8:	f8 01       	movw	r30, r16
 2ba:	82 83       	std	Z+2, r24	; 0x02
    TWCR = (1 << TWEN) | (twieBit << TWIE);
 2bc:	84 60       	ori	r24, 0x04	; 4
 2be:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
}
 2c2:	df 91       	pop	r29
 2c4:	cf 91       	pop	r28
 2c6:	1f 91       	pop	r17
 2c8:	0f 91       	pop	r16
 2ca:	08 95       	ret

000002cc <_ZN9I2CPeriph4ReadEhPhhS0_jj>:

uint8_t I2CPeriph::Read(uint8_t devAddr, uint8_t regAddr[], uint8_t regAddrLen, uint8_t data[], uint16_t dataLen, uint16_t tout = 100) {
 2cc:	5f 92       	push	r5
 2ce:	6f 92       	push	r6
 2d0:	7f 92       	push	r7
 2d2:	8f 92       	push	r8
 2d4:	9f 92       	push	r9
 2d6:	af 92       	push	r10
 2d8:	bf 92       	push	r11
 2da:	cf 92       	push	r12
 2dc:	df 92       	push	r13
 2de:	ef 92       	push	r14
 2e0:	ff 92       	push	r15
 2e2:	0f 93       	push	r16
 2e4:	1f 93       	push	r17
 2e6:	cf 93       	push	r28
 2e8:	df 93       	push	r29
 2ea:	ec 01       	movw	r28, r24
 2ec:	96 2e       	mov	r9, r22
 2ee:	5a 01       	movw	r10, r20
 2f0:	82 2e       	mov	r8, r18
 2f2:	38 01       	movw	r6, r16
    uint8_t status = 0;
    tout *= TWBR * dataLen;
 2f4:	20 91 b8 00 	lds	r18, 0x00B8	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
 2f8:	2c 9d       	mul	r18, r12
 2fa:	c0 01       	movw	r24, r0
 2fc:	2d 9d       	mul	r18, r13
 2fe:	90 0d       	add	r25, r0
 300:	11 24       	eor	r1, r1
 302:	e8 9e       	mul	r14, r24
 304:	80 01       	movw	r16, r0
 306:	e9 9e       	mul	r14, r25
 308:	10 0d       	add	r17, r0
 30a:	f8 9e       	mul	r15, r24
 30c:	10 0d       	add	r17, r0
 30e:	11 24       	eor	r1, r1

    //Start
    GenerateStart();
 310:	e8 81       	ld	r30, Y
 312:	f9 81       	ldd	r31, Y+1	; 0x01
 314:	02 80       	ldd	r0, Z+2	; 0x02
 316:	f3 81       	ldd	r31, Z+3	; 0x03
 318:	e0 2d       	mov	r30, r0
 31a:	ce 01       	movw	r24, r28
 31c:	09 95       	icall
    while (!IsStartCondition() && tout > 0) {
 31e:	e8 81       	ld	r30, Y
 320:	f9 81       	ldd	r31, Y+1	; 0x01
 322:	04 84       	ldd	r0, Z+12	; 0x0c
 324:	f5 85       	ldd	r31, Z+13	; 0x0d
 326:	e0 2d       	mov	r30, r0
 328:	ce 01       	movw	r24, r28
 32a:	09 95       	icall
 32c:	81 11       	cpse	r24, r1
 32e:	e6 c0       	rjmp	.+460    	; 0x4fc <__LOCK_REGION_LENGTH__+0xfc>
 330:	01 15       	cp	r16, r1
 332:	11 05       	cpc	r17, r1
 334:	09 f0       	breq	.+2      	; 0x338 <_ZN9I2CPeriph4ReadEhPhhS0_jj+0x6c>
 336:	df c0       	rjmp	.+446    	; 0x4f6 <__LOCK_REGION_LENGTH__+0xf6>
 338:	e1 c0       	rjmp	.+450    	; 0x4fc <__LOCK_REGION_LENGTH__+0xfc>
        tout--;
    }
    //Device Address (Write)
    Transmit(devAddr);
    while (!IsTransmissionComplete() && tout > 0) {
 33a:	e8 81       	ld	r30, Y
 33c:	f9 81       	ldd	r31, Y+1	; 0x01
 33e:	06 84       	ldd	r0, Z+14	; 0x0e
 340:	f7 85       	ldd	r31, Z+15	; 0x0f
 342:	e0 2d       	mov	r30, r0
 344:	ce 01       	movw	r24, r28
 346:	09 95       	icall
 348:	81 11       	cpse	r24, r1
 34a:	e1 c0       	rjmp	.+450    	; 0x50e <__LOCK_REGION_LENGTH__+0x10e>
 34c:	01 15       	cp	r16, r1
 34e:	11 05       	cpc	r17, r1
 350:	09 f0       	breq	.+2      	; 0x354 <_ZN9I2CPeriph4ReadEhPhhS0_jj+0x88>
 352:	e7 c0       	rjmp	.+462    	; 0x522 <__LOCK_REGION_LENGTH__+0x122>
 354:	dc c0       	rjmp	.+440    	; 0x50e <__LOCK_REGION_LENGTH__+0x10e>
        tout--;
    }
    if (IsACK()) {
        status = 1;
        for (uint8_t i = 0; i < regAddrLen; i++) {
 356:	88 20       	and	r8, r8
 358:	09 f1       	breq	.+66     	; 0x39c <_ZN9I2CPeriph4ReadEhPhhS0_jj+0xd0>
 35a:	65 01       	movw	r12, r10
 35c:	8a 94       	dec	r8
 35e:	88 2d       	mov	r24, r8
 360:	90 e0       	ldi	r25, 0x00	; 0
 362:	01 96       	adiw	r24, 0x01	; 1
 364:	a8 0e       	add	r10, r24
 366:	b9 1e       	adc	r11, r25
 368:	88 24       	eor	r8, r8
 36a:	83 94       	inc	r8
            //Register Address
            Transmit(regAddr[i]);
 36c:	f6 01       	movw	r30, r12
 36e:	61 91       	ld	r22, Z+
 370:	6f 01       	movw	r12, r30
 372:	e8 81       	ld	r30, Y
 374:	f9 81       	ldd	r31, Y+1	; 0x01
 376:	06 80       	ldd	r0, Z+6	; 0x06
 378:	f7 81       	ldd	r31, Z+7	; 0x07
 37a:	e0 2d       	mov	r30, r0
 37c:	ce 01       	movw	r24, r28
 37e:	09 95       	icall
            while (!IsTransmissionComplete() && tout > 0) {
 380:	e8 81       	ld	r30, Y
 382:	f9 81       	ldd	r31, Y+1	; 0x01
 384:	06 84       	ldd	r0, Z+14	; 0x0e
 386:	f7 85       	ldd	r31, Z+15	; 0x0f
 388:	e0 2d       	mov	r30, r0
 38a:	ce 01       	movw	r24, r28
 38c:	09 95       	icall
 38e:	81 11       	cpse	r24, r1
 390:	ce c0       	rjmp	.+412    	; 0x52e <__LOCK_REGION_LENGTH__+0x12e>
 392:	01 15       	cp	r16, r1
 394:	11 05       	cpc	r17, r1
 396:	09 f0       	breq	.+2      	; 0x39a <_ZN9I2CPeriph4ReadEhPhhS0_jj+0xce>
 398:	c7 c0       	rjmp	.+398    	; 0x528 <__LOCK_REGION_LENGTH__+0x128>
 39a:	c9 c0       	rjmp	.+402    	; 0x52e <__LOCK_REGION_LENGTH__+0x12e>
    while (!IsTransmissionComplete() && tout > 0) {
        tout--;
    }
    if (IsACK()) {
        status = 1;
        for (uint8_t i = 0; i < regAddrLen; i++) {
 39c:	88 24       	eor	r8, r8
 39e:	83 94       	inc	r8
                tout--;
            }
            status &= IsACK();
        }
        //Repeated Start
        GenerateStart();
 3a0:	e8 81       	ld	r30, Y
 3a2:	f9 81       	ldd	r31, Y+1	; 0x01
 3a4:	02 80       	ldd	r0, Z+2	; 0x02
 3a6:	f3 81       	ldd	r31, Z+3	; 0x03
 3a8:	e0 2d       	mov	r30, r0
 3aa:	ce 01       	movw	r24, r28
 3ac:	09 95       	icall
        while (!IsStartCondition() && tout > 0) {
 3ae:	e8 81       	ld	r30, Y
 3b0:	f9 81       	ldd	r31, Y+1	; 0x01
 3b2:	04 84       	ldd	r0, Z+12	; 0x0c
 3b4:	f5 85       	ldd	r31, Z+13	; 0x0d
 3b6:	e0 2d       	mov	r30, r0
 3b8:	ce 01       	movw	r24, r28
 3ba:	09 95       	icall
 3bc:	81 11       	cpse	r24, r1
 3be:	c7 c0       	rjmp	.+398    	; 0x54e <__LOCK_REGION_LENGTH__+0x14e>
 3c0:	01 15       	cp	r16, r1
 3c2:	11 05       	cpc	r17, r1
 3c4:	09 f0       	breq	.+2      	; 0x3c8 <_ZN9I2CPeriph4ReadEhPhhS0_jj+0xfc>
 3c6:	c0 c0       	rjmp	.+384    	; 0x548 <__LOCK_REGION_LENGTH__+0x148>
 3c8:	c2 c0       	rjmp	.+388    	; 0x54e <__LOCK_REGION_LENGTH__+0x14e>
            tout--;
        }
        //Device Address (Read)
        Transmit(devAddr | 1);
        while (!IsTransmissionComplete() && tout > 0) {
 3ca:	e8 81       	ld	r30, Y
 3cc:	f9 81       	ldd	r31, Y+1	; 0x01
 3ce:	06 84       	ldd	r0, Z+14	; 0x0e
 3d0:	f7 85       	ldd	r31, Z+15	; 0x0f
 3d2:	e0 2d       	mov	r30, r0
 3d4:	ce 01       	movw	r24, r28
 3d6:	09 95       	icall
 3d8:	81 11       	cpse	r24, r1
 3da:	c3 c0       	rjmp	.+390    	; 0x562 <__LOCK_REGION_LENGTH__+0x162>
 3dc:	01 15       	cp	r16, r1
 3de:	11 05       	cpc	r17, r1
 3e0:	09 f0       	breq	.+2      	; 0x3e4 <_ZN9I2CPeriph4ReadEhPhhS0_jj+0x118>
 3e2:	cd c0       	rjmp	.+410    	; 0x57e <__LOCK_REGION_LENGTH__+0x17e>
 3e4:	be c0       	rjmp	.+380    	; 0x562 <__LOCK_REGION_LENGTH__+0x162>
            tout--;
        }
        status &= IsACK();
        if (dataLen == 1) {
            SetACK(0);
 3e6:	e8 81       	ld	r30, Y
 3e8:	f9 81       	ldd	r31, Y+1	; 0x01
 3ea:	00 84       	ldd	r0, Z+8	; 0x08
 3ec:	f1 85       	ldd	r31, Z+9	; 0x09
 3ee:	e0 2d       	mov	r30, r0
 3f0:	60 e0       	ldi	r22, 0x00	; 0
 3f2:	ce 01       	movw	r24, r28
 3f4:	09 95       	icall
            Receive();
 3f6:	e8 81       	ld	r30, Y
 3f8:	f9 81       	ldd	r31, Y+1	; 0x01
 3fa:	02 84       	ldd	r0, Z+10	; 0x0a
 3fc:	f3 85       	ldd	r31, Z+11	; 0x0b
 3fe:	e0 2d       	mov	r30, r0
 400:	ce 01       	movw	r24, r28
 402:	09 95       	icall
            while (!IsTransmissionComplete() && tout > 0) {
 404:	e8 81       	ld	r30, Y
 406:	f9 81       	ldd	r31, Y+1	; 0x01
 408:	06 84       	ldd	r0, Z+14	; 0x0e
 40a:	f7 85       	ldd	r31, Z+15	; 0x0f
 40c:	e0 2d       	mov	r30, r0
 40e:	ce 01       	movw	r24, r28
 410:	09 95       	icall
 412:	81 11       	cpse	r24, r1
 414:	b7 c0       	rjmp	.+366    	; 0x584 <__LOCK_REGION_LENGTH__+0x184>
 416:	01 15       	cp	r16, r1
 418:	11 05       	cpc	r17, r1
 41a:	09 f0       	breq	.+2      	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 41c:	c4 c0       	rjmp	.+392    	; 0x5a6 <__LOCK_REGION_LENGTH__+0x1a6>
 41e:	b2 c0       	rjmp	.+356    	; 0x584 <__LOCK_REGION_LENGTH__+0x184>
            GenerateStop();
            data[0] = Receive();
        }
        else {
            uint16_t i;
            SetACK(1);
 420:	e8 81       	ld	r30, Y
 422:	f9 81       	ldd	r31, Y+1	; 0x01
 424:	00 84       	ldd	r0, Z+8	; 0x08
 426:	f1 85       	ldd	r31, Z+9	; 0x09
 428:	e0 2d       	mov	r30, r0
 42a:	61 e0       	ldi	r22, 0x01	; 1
 42c:	ce 01       	movw	r24, r28
 42e:	09 95       	icall
            Receive();
 430:	e8 81       	ld	r30, Y
 432:	f9 81       	ldd	r31, Y+1	; 0x01
 434:	02 84       	ldd	r0, Z+10	; 0x0a
 436:	f3 85       	ldd	r31, Z+11	; 0x0b
 438:	e0 2d       	mov	r30, r0
 43a:	ce 01       	movw	r24, r28
 43c:	09 95       	icall
            while (!IsTransmissionComplete() && tout > 0) {
 43e:	e8 81       	ld	r30, Y
 440:	f9 81       	ldd	r31, Y+1	; 0x01
 442:	06 84       	ldd	r0, Z+14	; 0x0e
 444:	f7 85       	ldd	r31, Z+15	; 0x0f
 446:	e0 2d       	mov	r30, r0
 448:	ce 01       	movw	r24, r28
 44a:	09 95       	icall
 44c:	81 11       	cpse	r24, r1
 44e:	ae c0       	rjmp	.+348    	; 0x5ac <__LOCK_REGION_LENGTH__+0x1ac>
 450:	01 15       	cp	r16, r1
 452:	11 05       	cpc	r17, r1
 454:	09 f0       	breq	.+2      	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
 456:	b0 c0       	rjmp	.+352    	; 0x5b8 <__LOCK_REGION_LENGTH__+0x1b8>
 458:	a9 c0       	rjmp	.+338    	; 0x5ac <__LOCK_REGION_LENGTH__+0x1ac>
 45a:	53 01       	movw	r10, r6
                tout--;
            }
            dataLen -= 1;
            for (i = 0; i < dataLen; i++) {
 45c:	c1 2c       	mov	r12, r1
 45e:	d1 2c       	mov	r13, r1
                SetACK(i + 1 < dataLen);
 460:	99 24       	eor	r9, r9
 462:	93 94       	inc	r9
 464:	51 2c       	mov	r5, r1
 466:	ff ef       	ldi	r31, 0xFF	; 255
 468:	cf 1a       	sub	r12, r31
 46a:	df 0a       	sbc	r13, r31
 46c:	69 2d       	mov	r22, r9
 46e:	ce 14       	cp	r12, r14
 470:	df 04       	cpc	r13, r15
 472:	08 f0       	brcs	.+2      	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
 474:	65 2d       	mov	r22, r5
 476:	e8 81       	ld	r30, Y
 478:	f9 81       	ldd	r31, Y+1	; 0x01
 47a:	00 84       	ldd	r0, Z+8	; 0x08
 47c:	f1 85       	ldd	r31, Z+9	; 0x09
 47e:	e0 2d       	mov	r30, r0
 480:	ce 01       	movw	r24, r28
 482:	09 95       	icall
                data[i] = Receive();
 484:	e8 81       	ld	r30, Y
 486:	f9 81       	ldd	r31, Y+1	; 0x01
 488:	02 84       	ldd	r0, Z+10	; 0x0a
 48a:	f3 85       	ldd	r31, Z+11	; 0x0b
 48c:	e0 2d       	mov	r30, r0
 48e:	ce 01       	movw	r24, r28
 490:	09 95       	icall
 492:	f5 01       	movw	r30, r10
 494:	81 93       	st	Z+, r24
 496:	5f 01       	movw	r10, r30
                while (!IsTransmissionComplete() && tout > 0) {
 498:	e8 81       	ld	r30, Y
 49a:	f9 81       	ldd	r31, Y+1	; 0x01
 49c:	06 84       	ldd	r0, Z+14	; 0x0e
 49e:	f7 85       	ldd	r31, Z+15	; 0x0f
 4a0:	e0 2d       	mov	r30, r0
 4a2:	ce 01       	movw	r24, r28
 4a4:	09 95       	icall
 4a6:	81 11       	cpse	r24, r1
 4a8:	8d c0       	rjmp	.+282    	; 0x5c4 <__LOCK_REGION_LENGTH__+0x1c4>
 4aa:	01 15       	cp	r16, r1
 4ac:	11 05       	cpc	r17, r1
 4ae:	09 f0       	breq	.+2      	; 0x4b2 <__LOCK_REGION_LENGTH__+0xb2>
 4b0:	86 c0       	rjmp	.+268    	; 0x5be <__LOCK_REGION_LENGTH__+0x1be>
 4b2:	88 c0       	rjmp	.+272    	; 0x5c4 <__LOCK_REGION_LENGTH__+0x1c4>
                    tout--;
                }
            }
            GenerateStop();
 4b4:	e8 81       	ld	r30, Y
 4b6:	f9 81       	ldd	r31, Y+1	; 0x01
 4b8:	04 80       	ldd	r0, Z+4	; 0x04
 4ba:	f5 81       	ldd	r31, Z+5	; 0x05
 4bc:	e0 2d       	mov	r30, r0
 4be:	ce 01       	movw	r24, r28
 4c0:	09 95       	icall
            data[i] = Receive();
 4c2:	e6 0c       	add	r14, r6
 4c4:	f7 1c       	adc	r15, r7
 4c6:	e8 81       	ld	r30, Y
 4c8:	f9 81       	ldd	r31, Y+1	; 0x01
 4ca:	02 84       	ldd	r0, Z+10	; 0x0a
 4cc:	f3 85       	ldd	r31, Z+11	; 0x0b
 4ce:	e0 2d       	mov	r30, r0
 4d0:	ce 01       	movw	r24, r28
 4d2:	09 95       	icall
 4d4:	f7 01       	movw	r30, r14
 4d6:	80 83       	st	Z, r24
 4d8:	08 c0       	rjmp	.+16     	; 0x4ea <__LOCK_REGION_LENGTH__+0xea>
        }

    }
    else {
        //Stop
        GenerateStop();
 4da:	e8 81       	ld	r30, Y
 4dc:	f9 81       	ldd	r31, Y+1	; 0x01
 4de:	04 80       	ldd	r0, Z+4	; 0x04
 4e0:	f5 81       	ldd	r31, Z+5	; 0x05
 4e2:	e0 2d       	mov	r30, r0
 4e4:	ce 01       	movw	r24, r28
 4e6:	09 95       	icall
    twieBit = i2cInit->InterruptEnable;
    TWCR = (1 << TWEN) | (twieBit << TWIE);
}

uint8_t I2CPeriph::Read(uint8_t devAddr, uint8_t regAddr[], uint8_t regAddrLen, uint8_t data[], uint16_t dataLen, uint16_t tout = 100) {
    uint8_t status = 0;
 4e8:	81 2c       	mov	r8, r1
    else {
        //Stop
        GenerateStop();
    }

    return (status & (tout > 0));
 4ea:	81 e0       	ldi	r24, 0x01	; 1
 4ec:	01 2b       	or	r16, r17
 4ee:	09 f4       	brne	.+2      	; 0x4f2 <__LOCK_REGION_LENGTH__+0xf2>
 4f0:	80 e0       	ldi	r24, 0x00	; 0
 4f2:	88 21       	and	r24, r8
 4f4:	6c c0       	rjmp	.+216    	; 0x5ce <__LOCK_REGION_LENGTH__+0x1ce>
    tout *= TWBR * dataLen;

    //Start
    GenerateStart();
    while (!IsStartCondition() && tout > 0) {
        tout--;
 4f6:	01 50       	subi	r16, 0x01	; 1
 4f8:	11 09       	sbc	r17, r1
    uint8_t status = 0;
    tout *= TWBR * dataLen;

    //Start
    GenerateStart();
    while (!IsStartCondition() && tout > 0) {
 4fa:	11 cf       	rjmp	.-478    	; 0x31e <_ZN9I2CPeriph4ReadEhPhhS0_jj+0x52>
        tout--;
    }
    //Device Address (Write)
    Transmit(devAddr);
 4fc:	e8 81       	ld	r30, Y
 4fe:	f9 81       	ldd	r31, Y+1	; 0x01
 500:	06 80       	ldd	r0, Z+6	; 0x06
 502:	f7 81       	ldd	r31, Z+7	; 0x07
 504:	e0 2d       	mov	r30, r0
 506:	69 2d       	mov	r22, r9
 508:	ce 01       	movw	r24, r28
 50a:	09 95       	icall
 50c:	16 cf       	rjmp	.-468    	; 0x33a <_ZN9I2CPeriph4ReadEhPhhS0_jj+0x6e>
    while (!IsTransmissionComplete() && tout > 0) {
        tout--;
    }
    if (IsACK()) {
 50e:	e8 81       	ld	r30, Y
 510:	f9 81       	ldd	r31, Y+1	; 0x01
 512:	00 88       	ldd	r0, Z+16	; 0x10
 514:	f1 89       	ldd	r31, Z+17	; 0x11
 516:	e0 2d       	mov	r30, r0
 518:	ce 01       	movw	r24, r28
 51a:	09 95       	icall
 51c:	81 11       	cpse	r24, r1
 51e:	1b cf       	rjmp	.-458    	; 0x356 <_ZN9I2CPeriph4ReadEhPhhS0_jj+0x8a>
 520:	dc cf       	rjmp	.-72     	; 0x4da <__LOCK_REGION_LENGTH__+0xda>
        tout--;
    }
    //Device Address (Write)
    Transmit(devAddr);
    while (!IsTransmissionComplete() && tout > 0) {
        tout--;
 522:	01 50       	subi	r16, 0x01	; 1
 524:	11 09       	sbc	r17, r1
    while (!IsStartCondition() && tout > 0) {
        tout--;
    }
    //Device Address (Write)
    Transmit(devAddr);
    while (!IsTransmissionComplete() && tout > 0) {
 526:	09 cf       	rjmp	.-494    	; 0x33a <_ZN9I2CPeriph4ReadEhPhhS0_jj+0x6e>
        status = 1;
        for (uint8_t i = 0; i < regAddrLen; i++) {
            //Register Address
            Transmit(regAddr[i]);
            while (!IsTransmissionComplete() && tout > 0) {
                tout--;
 528:	01 50       	subi	r16, 0x01	; 1
 52a:	11 09       	sbc	r17, r1
    if (IsACK()) {
        status = 1;
        for (uint8_t i = 0; i < regAddrLen; i++) {
            //Register Address
            Transmit(regAddr[i]);
            while (!IsTransmissionComplete() && tout > 0) {
 52c:	29 cf       	rjmp	.-430    	; 0x380 <_ZN9I2CPeriph4ReadEhPhhS0_jj+0xb4>
                tout--;
            }
            status &= IsACK();
 52e:	e8 81       	ld	r30, Y
 530:	f9 81       	ldd	r31, Y+1	; 0x01
 532:	00 88       	ldd	r0, Z+16	; 0x10
 534:	f1 89       	ldd	r31, Z+17	; 0x11
 536:	e0 2d       	mov	r30, r0
 538:	ce 01       	movw	r24, r28
 53a:	09 95       	icall
 53c:	88 22       	and	r8, r24
    while (!IsTransmissionComplete() && tout > 0) {
        tout--;
    }
    if (IsACK()) {
        status = 1;
        for (uint8_t i = 0; i < regAddrLen; i++) {
 53e:	ca 14       	cp	r12, r10
 540:	db 04       	cpc	r13, r11
 542:	09 f0       	breq	.+2      	; 0x546 <__LOCK_REGION_LENGTH__+0x146>
 544:	13 cf       	rjmp	.-474    	; 0x36c <_ZN9I2CPeriph4ReadEhPhhS0_jj+0xa0>
 546:	2c cf       	rjmp	.-424    	; 0x3a0 <_ZN9I2CPeriph4ReadEhPhhS0_jj+0xd4>
            status &= IsACK();
        }
        //Repeated Start
        GenerateStart();
        while (!IsStartCondition() && tout > 0) {
            tout--;
 548:	01 50       	subi	r16, 0x01	; 1
 54a:	11 09       	sbc	r17, r1
            }
            status &= IsACK();
        }
        //Repeated Start
        GenerateStart();
        while (!IsStartCondition() && tout > 0) {
 54c:	30 cf       	rjmp	.-416    	; 0x3ae <_ZN9I2CPeriph4ReadEhPhhS0_jj+0xe2>
            tout--;
        }
        //Device Address (Read)
        Transmit(devAddr | 1);
 54e:	69 2d       	mov	r22, r9
 550:	61 60       	ori	r22, 0x01	; 1
 552:	e8 81       	ld	r30, Y
 554:	f9 81       	ldd	r31, Y+1	; 0x01
 556:	06 80       	ldd	r0, Z+6	; 0x06
 558:	f7 81       	ldd	r31, Z+7	; 0x07
 55a:	e0 2d       	mov	r30, r0
 55c:	ce 01       	movw	r24, r28
 55e:	09 95       	icall
 560:	34 cf       	rjmp	.-408    	; 0x3ca <_ZN9I2CPeriph4ReadEhPhhS0_jj+0xfe>
        while (!IsTransmissionComplete() && tout > 0) {
            tout--;
        }
        status &= IsACK();
 562:	e8 81       	ld	r30, Y
 564:	f9 81       	ldd	r31, Y+1	; 0x01
 566:	00 88       	ldd	r0, Z+16	; 0x10
 568:	f1 89       	ldd	r31, Z+17	; 0x11
 56a:	e0 2d       	mov	r30, r0
 56c:	ce 01       	movw	r24, r28
 56e:	09 95       	icall
 570:	88 22       	and	r8, r24
        if (dataLen == 1) {
 572:	f1 e0       	ldi	r31, 0x01	; 1
 574:	ef 16       	cp	r14, r31
 576:	f1 04       	cpc	r15, r1
 578:	09 f0       	breq	.+2      	; 0x57c <__LOCK_REGION_LENGTH__+0x17c>
 57a:	52 cf       	rjmp	.-348    	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
 57c:	34 cf       	rjmp	.-408    	; 0x3e6 <_ZN9I2CPeriph4ReadEhPhhS0_jj+0x11a>
            tout--;
        }
        //Device Address (Read)
        Transmit(devAddr | 1);
        while (!IsTransmissionComplete() && tout > 0) {
            tout--;
 57e:	01 50       	subi	r16, 0x01	; 1
 580:	11 09       	sbc	r17, r1
        while (!IsStartCondition() && tout > 0) {
            tout--;
        }
        //Device Address (Read)
        Transmit(devAddr | 1);
        while (!IsTransmissionComplete() && tout > 0) {
 582:	23 cf       	rjmp	.-442    	; 0x3ca <_ZN9I2CPeriph4ReadEhPhhS0_jj+0xfe>
            Receive();
            while (!IsTransmissionComplete() && tout > 0) {
                tout--;
            }
            //Stop
            GenerateStop();
 584:	e8 81       	ld	r30, Y
 586:	f9 81       	ldd	r31, Y+1	; 0x01
 588:	04 80       	ldd	r0, Z+4	; 0x04
 58a:	f5 81       	ldd	r31, Z+5	; 0x05
 58c:	e0 2d       	mov	r30, r0
 58e:	ce 01       	movw	r24, r28
 590:	09 95       	icall
            data[0] = Receive();
 592:	e8 81       	ld	r30, Y
 594:	f9 81       	ldd	r31, Y+1	; 0x01
 596:	02 84       	ldd	r0, Z+10	; 0x0a
 598:	f3 85       	ldd	r31, Z+11	; 0x0b
 59a:	e0 2d       	mov	r30, r0
 59c:	ce 01       	movw	r24, r28
 59e:	09 95       	icall
 5a0:	f3 01       	movw	r30, r6
 5a2:	80 83       	st	Z, r24
 5a4:	a2 cf       	rjmp	.-188    	; 0x4ea <__LOCK_REGION_LENGTH__+0xea>
        status &= IsACK();
        if (dataLen == 1) {
            SetACK(0);
            Receive();
            while (!IsTransmissionComplete() && tout > 0) {
                tout--;
 5a6:	01 50       	subi	r16, 0x01	; 1
 5a8:	11 09       	sbc	r17, r1
        }
        status &= IsACK();
        if (dataLen == 1) {
            SetACK(0);
            Receive();
            while (!IsTransmissionComplete() && tout > 0) {
 5aa:	2c cf       	rjmp	.-424    	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
            SetACK(1);
            Receive();
            while (!IsTransmissionComplete() && tout > 0) {
                tout--;
            }
            dataLen -= 1;
 5ac:	f1 e0       	ldi	r31, 0x01	; 1
 5ae:	ef 1a       	sub	r14, r31
 5b0:	f1 08       	sbc	r15, r1
            for (i = 0; i < dataLen; i++) {
 5b2:	09 f0       	breq	.+2      	; 0x5b6 <__LOCK_REGION_LENGTH__+0x1b6>
 5b4:	52 cf       	rjmp	.-348    	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
 5b6:	7e cf       	rjmp	.-260    	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
        else {
            uint16_t i;
            SetACK(1);
            Receive();
            while (!IsTransmissionComplete() && tout > 0) {
                tout--;
 5b8:	01 50       	subi	r16, 0x01	; 1
 5ba:	11 09       	sbc	r17, r1
        }
        else {
            uint16_t i;
            SetACK(1);
            Receive();
            while (!IsTransmissionComplete() && tout > 0) {
 5bc:	40 cf       	rjmp	.-384    	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
            dataLen -= 1;
            for (i = 0; i < dataLen; i++) {
                SetACK(i + 1 < dataLen);
                data[i] = Receive();
                while (!IsTransmissionComplete() && tout > 0) {
                    tout--;
 5be:	01 50       	subi	r16, 0x01	; 1
 5c0:	11 09       	sbc	r17, r1
            }
            dataLen -= 1;
            for (i = 0; i < dataLen; i++) {
                SetACK(i + 1 < dataLen);
                data[i] = Receive();
                while (!IsTransmissionComplete() && tout > 0) {
 5c2:	6a cf       	rjmp	.-300    	; 0x498 <__LOCK_REGION_LENGTH__+0x98>
            Receive();
            while (!IsTransmissionComplete() && tout > 0) {
                tout--;
            }
            dataLen -= 1;
            for (i = 0; i < dataLen; i++) {
 5c4:	ce 14       	cp	r12, r14
 5c6:	df 04       	cpc	r13, r15
 5c8:	08 f4       	brcc	.+2      	; 0x5cc <__LOCK_REGION_LENGTH__+0x1cc>
 5ca:	4d cf       	rjmp	.-358    	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
 5cc:	73 cf       	rjmp	.-282    	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
        //Stop
        GenerateStop();
    }

    return (status & (tout > 0));
}
 5ce:	df 91       	pop	r29
 5d0:	cf 91       	pop	r28
 5d2:	1f 91       	pop	r17
 5d4:	0f 91       	pop	r16
 5d6:	ff 90       	pop	r15
 5d8:	ef 90       	pop	r14
 5da:	df 90       	pop	r13
 5dc:	cf 90       	pop	r12
 5de:	bf 90       	pop	r11
 5e0:	af 90       	pop	r10
 5e2:	9f 90       	pop	r9
 5e4:	8f 90       	pop	r8
 5e6:	7f 90       	pop	r7
 5e8:	6f 90       	pop	r6
 5ea:	5f 90       	pop	r5
 5ec:	08 95       	ret

000005ee <_ZN9I2CPeriph5WriteEhPhjj>:

uint8_t I2CPeriph::Write(uint8_t devAddr, uint8_t data[], uint16_t dataLen, uint16_t tout = 100) {
 5ee:	af 92       	push	r10
 5f0:	bf 92       	push	r11
 5f2:	cf 92       	push	r12
 5f4:	df 92       	push	r13
 5f6:	ef 92       	push	r14
 5f8:	ff 92       	push	r15
 5fa:	0f 93       	push	r16
 5fc:	1f 93       	push	r17
 5fe:	cf 93       	push	r28
 600:	df 93       	push	r29
 602:	ec 01       	movw	r28, r24
 604:	f6 2e       	mov	r15, r22
 606:	5a 01       	movw	r10, r20
 608:	69 01       	movw	r12, r18
    uint8_t status = 0;
    tout *= TWBR * dataLen;
 60a:	20 91 b8 00 	lds	r18, 0x00B8	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
 60e:	20 9f       	mul	r18, r16
 610:	c0 01       	movw	r24, r0
 612:	21 9f       	mul	r18, r17
 614:	90 0d       	add	r25, r0
 616:	11 24       	eor	r1, r1
 618:	c8 9e       	mul	r12, r24
 61a:	80 01       	movw	r16, r0
 61c:	c9 9e       	mul	r12, r25
 61e:	10 0d       	add	r17, r0
 620:	d8 9e       	mul	r13, r24
 622:	10 0d       	add	r17, r0
 624:	11 24       	eor	r1, r1

    //Start
    GenerateStart();
 626:	e8 81       	ld	r30, Y
 628:	f9 81       	ldd	r31, Y+1	; 0x01
 62a:	02 80       	ldd	r0, Z+2	; 0x02
 62c:	f3 81       	ldd	r31, Z+3	; 0x03
 62e:	e0 2d       	mov	r30, r0
 630:	ce 01       	movw	r24, r28
 632:	09 95       	icall
    while (!IsStartCondition() && tout > 0) {
 634:	e8 81       	ld	r30, Y
 636:	f9 81       	ldd	r31, Y+1	; 0x01
 638:	04 84       	ldd	r0, Z+12	; 0x0c
 63a:	f5 85       	ldd	r31, Z+13	; 0x0d
 63c:	e0 2d       	mov	r30, r0
 63e:	ce 01       	movw	r24, r28
 640:	09 95       	icall
 642:	81 11       	cpse	r24, r1
 644:	43 c0       	rjmp	.+134    	; 0x6cc <_ZN9I2CPeriph5WriteEhPhjj+0xde>
 646:	01 15       	cp	r16, r1
 648:	11 05       	cpc	r17, r1
 64a:	e9 f5       	brne	.+122    	; 0x6c6 <_ZN9I2CPeriph5WriteEhPhjj+0xd8>
 64c:	3f c0       	rjmp	.+126    	; 0x6cc <_ZN9I2CPeriph5WriteEhPhjj+0xde>
        tout--;
    }
    //Device Address (Write)
    Transmit(devAddr);
    while (!IsTransmissionComplete() && tout > 0) {
 64e:	e8 81       	ld	r30, Y
 650:	f9 81       	ldd	r31, Y+1	; 0x01
 652:	06 84       	ldd	r0, Z+14	; 0x0e
 654:	f7 85       	ldd	r31, Z+15	; 0x0f
 656:	e0 2d       	mov	r30, r0
 658:	ce 01       	movw	r24, r28
 65a:	09 95       	icall
 65c:	81 11       	cpse	r24, r1
 65e:	3f c0       	rjmp	.+126    	; 0x6de <_ZN9I2CPeriph5WriteEhPhjj+0xf0>
 660:	01 15       	cp	r16, r1
 662:	11 05       	cpc	r17, r1
 664:	09 f0       	breq	.+2      	; 0x668 <_ZN9I2CPeriph5WriteEhPhjj+0x7a>
 666:	46 c0       	rjmp	.+140    	; 0x6f4 <_ZN9I2CPeriph5WriteEhPhjj+0x106>
 668:	3a c0       	rjmp	.+116    	; 0x6de <_ZN9I2CPeriph5WriteEhPhjj+0xf0>
        tout--;
    }
    if (IsACK()) {
        status = 1;
        for (uint16_t i = 0; i < dataLen; i++) {
 66a:	c1 14       	cp	r12, r1
 66c:	d1 04       	cpc	r13, r1
 66e:	e1 f0       	breq	.+56     	; 0x6a8 <_ZN9I2CPeriph5WriteEhPhjj+0xba>
 670:	75 01       	movw	r14, r10
 672:	ca 0c       	add	r12, r10
 674:	db 1c       	adc	r13, r11
 676:	bb 24       	eor	r11, r11
 678:	b3 94       	inc	r11
            Transmit(data[i]);
 67a:	f7 01       	movw	r30, r14
 67c:	61 91       	ld	r22, Z+
 67e:	7f 01       	movw	r14, r30
 680:	e8 81       	ld	r30, Y
 682:	f9 81       	ldd	r31, Y+1	; 0x01
 684:	06 80       	ldd	r0, Z+6	; 0x06
 686:	f7 81       	ldd	r31, Z+7	; 0x07
 688:	e0 2d       	mov	r30, r0
 68a:	ce 01       	movw	r24, r28
 68c:	09 95       	icall
            while (!IsTransmissionComplete() && tout > 0) {
 68e:	e8 81       	ld	r30, Y
 690:	f9 81       	ldd	r31, Y+1	; 0x01
 692:	06 84       	ldd	r0, Z+14	; 0x0e
 694:	f7 85       	ldd	r31, Z+15	; 0x0f
 696:	e0 2d       	mov	r30, r0
 698:	ce 01       	movw	r24, r28
 69a:	09 95       	icall
 69c:	81 11       	cpse	r24, r1
 69e:	30 c0       	rjmp	.+96     	; 0x700 <_ZN9I2CPeriph5WriteEhPhjj+0x112>
 6a0:	01 15       	cp	r16, r1
 6a2:	11 05       	cpc	r17, r1
 6a4:	51 f5       	brne	.+84     	; 0x6fa <_ZN9I2CPeriph5WriteEhPhjj+0x10c>
 6a6:	2c c0       	rjmp	.+88     	; 0x700 <_ZN9I2CPeriph5WriteEhPhjj+0x112>
    while (!IsTransmissionComplete() && tout > 0) {
        tout--;
    }
    if (IsACK()) {
        status = 1;
        for (uint16_t i = 0; i < dataLen; i++) {
 6a8:	bb 24       	eor	r11, r11
 6aa:	b3 94       	inc	r11
            }
            status &= IsACK();
        }
    }
    //Stop
    GenerateStop();
 6ac:	e8 81       	ld	r30, Y
 6ae:	f9 81       	ldd	r31, Y+1	; 0x01
 6b0:	04 80       	ldd	r0, Z+4	; 0x04
 6b2:	f5 81       	ldd	r31, Z+5	; 0x05
 6b4:	e0 2d       	mov	r30, r0
 6b6:	ce 01       	movw	r24, r28
 6b8:	09 95       	icall

    return (status & (tout > 0));
 6ba:	81 e0       	ldi	r24, 0x01	; 1
 6bc:	01 2b       	or	r16, r17
 6be:	09 f4       	brne	.+2      	; 0x6c2 <_ZN9I2CPeriph5WriteEhPhjj+0xd4>
 6c0:	80 e0       	ldi	r24, 0x00	; 0
 6c2:	8b 21       	and	r24, r11
 6c4:	2a c0       	rjmp	.+84     	; 0x71a <_ZN9I2CPeriph5WriteEhPhjj+0x12c>
    tout *= TWBR * dataLen;

    //Start
    GenerateStart();
    while (!IsStartCondition() && tout > 0) {
        tout--;
 6c6:	01 50       	subi	r16, 0x01	; 1
 6c8:	11 09       	sbc	r17, r1
    uint8_t status = 0;
    tout *= TWBR * dataLen;

    //Start
    GenerateStart();
    while (!IsStartCondition() && tout > 0) {
 6ca:	b4 cf       	rjmp	.-152    	; 0x634 <_ZN9I2CPeriph5WriteEhPhjj+0x46>
        tout--;
    }
    //Device Address (Write)
    Transmit(devAddr);
 6cc:	e8 81       	ld	r30, Y
 6ce:	f9 81       	ldd	r31, Y+1	; 0x01
 6d0:	06 80       	ldd	r0, Z+6	; 0x06
 6d2:	f7 81       	ldd	r31, Z+7	; 0x07
 6d4:	e0 2d       	mov	r30, r0
 6d6:	6f 2d       	mov	r22, r15
 6d8:	ce 01       	movw	r24, r28
 6da:	09 95       	icall
 6dc:	b8 cf       	rjmp	.-144    	; 0x64e <_ZN9I2CPeriph5WriteEhPhjj+0x60>
    while (!IsTransmissionComplete() && tout > 0) {
        tout--;
    }
    if (IsACK()) {
 6de:	e8 81       	ld	r30, Y
 6e0:	f9 81       	ldd	r31, Y+1	; 0x01
 6e2:	00 88       	ldd	r0, Z+16	; 0x10
 6e4:	f1 89       	ldd	r31, Z+17	; 0x11
 6e6:	e0 2d       	mov	r30, r0
 6e8:	ce 01       	movw	r24, r28
 6ea:	09 95       	icall
 6ec:	81 11       	cpse	r24, r1
 6ee:	bd cf       	rjmp	.-134    	; 0x66a <_ZN9I2CPeriph5WriteEhPhjj+0x7c>

    return (status & (tout > 0));
}

uint8_t I2CPeriph::Write(uint8_t devAddr, uint8_t data[], uint16_t dataLen, uint16_t tout = 100) {
    uint8_t status = 0;
 6f0:	b1 2c       	mov	r11, r1
 6f2:	dc cf       	rjmp	.-72     	; 0x6ac <_ZN9I2CPeriph5WriteEhPhjj+0xbe>
        tout--;
    }
    //Device Address (Write)
    Transmit(devAddr);
    while (!IsTransmissionComplete() && tout > 0) {
        tout--;
 6f4:	01 50       	subi	r16, 0x01	; 1
 6f6:	11 09       	sbc	r17, r1
    while (!IsStartCondition() && tout > 0) {
        tout--;
    }
    //Device Address (Write)
    Transmit(devAddr);
    while (!IsTransmissionComplete() && tout > 0) {
 6f8:	aa cf       	rjmp	.-172    	; 0x64e <_ZN9I2CPeriph5WriteEhPhjj+0x60>
    if (IsACK()) {
        status = 1;
        for (uint16_t i = 0; i < dataLen; i++) {
            Transmit(data[i]);
            while (!IsTransmissionComplete() && tout > 0) {
                tout--;
 6fa:	01 50       	subi	r16, 0x01	; 1
 6fc:	11 09       	sbc	r17, r1
    }
    if (IsACK()) {
        status = 1;
        for (uint16_t i = 0; i < dataLen; i++) {
            Transmit(data[i]);
            while (!IsTransmissionComplete() && tout > 0) {
 6fe:	c7 cf       	rjmp	.-114    	; 0x68e <_ZN9I2CPeriph5WriteEhPhjj+0xa0>
                tout--;
            }
            status &= IsACK();
 700:	e8 81       	ld	r30, Y
 702:	f9 81       	ldd	r31, Y+1	; 0x01
 704:	00 88       	ldd	r0, Z+16	; 0x10
 706:	f1 89       	ldd	r31, Z+17	; 0x11
 708:	e0 2d       	mov	r30, r0
 70a:	ce 01       	movw	r24, r28
 70c:	09 95       	icall
 70e:	b8 22       	and	r11, r24
    while (!IsTransmissionComplete() && tout > 0) {
        tout--;
    }
    if (IsACK()) {
        status = 1;
        for (uint16_t i = 0; i < dataLen; i++) {
 710:	ce 14       	cp	r12, r14
 712:	df 04       	cpc	r13, r15
 714:	09 f0       	breq	.+2      	; 0x718 <_ZN9I2CPeriph5WriteEhPhjj+0x12a>
 716:	b1 cf       	rjmp	.-158    	; 0x67a <_ZN9I2CPeriph5WriteEhPhjj+0x8c>
 718:	c9 cf       	rjmp	.-110    	; 0x6ac <_ZN9I2CPeriph5WriteEhPhjj+0xbe>
    }
    //Stop
    GenerateStop();

    return (status & (tout > 0));
 71a:	df 91       	pop	r29
 71c:	cf 91       	pop	r28
 71e:	1f 91       	pop	r17
 720:	0f 91       	pop	r16
 722:	ff 90       	pop	r15
 724:	ef 90       	pop	r14
 726:	df 90       	pop	r13
 728:	cf 90       	pop	r12
 72a:	bf 90       	pop	r11
 72c:	af 90       	pop	r10
 72e:	08 95       	ret

00000730 <__vector_14>:

#include <avr/io.h>
#include <avr/interrupt.h>

volatile uint32_t _ticks;
ISR(TIMER0_COMPA_vect){
 730:	1f 92       	push	r1
 732:	0f 92       	push	r0
 734:	0f b6       	in	r0, 0x3f	; 63
 736:	0f 92       	push	r0
 738:	11 24       	eor	r1, r1
 73a:	8f 93       	push	r24
 73c:	9f 93       	push	r25
 73e:	af 93       	push	r26
 740:	bf 93       	push	r27
	_ticks ++;
 742:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <_ticks>
 746:	90 91 40 01 	lds	r25, 0x0140	; 0x800140 <_ticks+0x1>
 74a:	a0 91 41 01 	lds	r26, 0x0141	; 0x800141 <_ticks+0x2>
 74e:	b0 91 42 01 	lds	r27, 0x0142	; 0x800142 <_ticks+0x3>
 752:	01 96       	adiw	r24, 0x01	; 1
 754:	a1 1d       	adc	r26, r1
 756:	b1 1d       	adc	r27, r1
 758:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <_ticks>
 75c:	90 93 40 01 	sts	0x0140, r25	; 0x800140 <_ticks+0x1>
 760:	a0 93 41 01 	sts	0x0141, r26	; 0x800141 <_ticks+0x2>
 764:	b0 93 42 01 	sts	0x0142, r27	; 0x800142 <_ticks+0x3>
}
 768:	bf 91       	pop	r27
 76a:	af 91       	pop	r26
 76c:	9f 91       	pop	r25
 76e:	8f 91       	pop	r24
 770:	0f 90       	pop	r0
 772:	0f be       	out	0x3f, r0	; 63
 774:	0f 90       	pop	r0
 776:	1f 90       	pop	r1
 778:	18 95       	reti

0000077a <_ZN6System9GPIO_InitEv>:
	ATOMIC_BLOCK(ATOMIC_FORCEON){
		t = _ticks;
	}
	
	return t;
}
 77a:	81 e1       	ldi	r24, 0x11	; 17
 77c:	85 b9       	out	0x05, r24	; 5
 77e:	8e e2       	ldi	r24, 0x2E	; 46
 780:	84 b9       	out	0x04, r24	; 4
 782:	8f e0       	ldi	r24, 0x0F	; 15
 784:	88 b9       	out	0x08, r24	; 8
 786:	17 b8       	out	0x07, r1	; 7
 788:	8d ef       	ldi	r24, 0xFD	; 253
 78a:	8b b9       	out	0x0b, r24	; 11
 78c:	82 e0       	ldi	r24, 0x02	; 2
 78e:	8a b9       	out	0x0a, r24	; 10
 790:	08 95       	ret

00000792 <_ZN6System8I2C_InitEv>:
 792:	cf 93       	push	r28
 794:	df 93       	push	r29
 796:	cd b7       	in	r28, 0x3d	; 61
 798:	de b7       	in	r29, 0x3e	; 62
 79a:	2b 97       	sbiw	r28, 0x0b	; 11
 79c:	0f b6       	in	r0, 0x3f	; 63
 79e:	f8 94       	cli
 7a0:	de bf       	out	0x3e, r29	; 62
 7a2:	0f be       	out	0x3f, r0	; 63
 7a4:	cd bf       	out	0x3d, r28	; 61
 7a6:	80 e0       	ldi	r24, 0x00	; 0
 7a8:	94 e2       	ldi	r25, 0x24	; 36
 7aa:	a4 ef       	ldi	r26, 0xF4	; 244
 7ac:	b0 e0       	ldi	r27, 0x00	; 0
 7ae:	89 83       	std	Y+1, r24	; 0x01
 7b0:	9a 83       	std	Y+2, r25	; 0x02
 7b2:	ab 83       	std	Y+3, r26	; 0x03
 7b4:	bc 83       	std	Y+4, r27	; 0x04
 7b6:	1a 86       	std	Y+10, r1	; 0x0a
 7b8:	1b 86       	std	Y+11, r1	; 0x0b
 7ba:	8e ef       	ldi	r24, 0xFE	; 254
 7bc:	89 87       	std	Y+9, r24	; 0x09
 7be:	80 e8       	ldi	r24, 0x80	; 128
 7c0:	9a e1       	ldi	r25, 0x1A	; 26
 7c2:	a6 e0       	ldi	r26, 0x06	; 6
 7c4:	b0 e0       	ldi	r27, 0x00	; 0
 7c6:	8d 83       	std	Y+5, r24	; 0x05
 7c8:	9e 83       	std	Y+6, r25	; 0x06
 7ca:	af 83       	std	Y+7, r26	; 0x07
 7cc:	b8 87       	std	Y+8, r27	; 0x08
 7ce:	be 01       	movw	r22, r28
 7d0:	6f 5f       	subi	r22, 0xFF	; 255
 7d2:	7f 4f       	sbci	r23, 0xFF	; 255
 7d4:	87 e3       	ldi	r24, 0x37	; 55
 7d6:	91 e0       	ldi	r25, 0x01	; 1
 7d8:	0e 94 2d 01 	call	0x25a	; 0x25a <_ZN9I2CPeriph4InitEP14I2CInitTypeDef>
 7dc:	2b 96       	adiw	r28, 0x0b	; 11
 7de:	0f b6       	in	r0, 0x3f	; 63
 7e0:	f8 94       	cli
 7e2:	de bf       	out	0x3e, r29	; 62
 7e4:	0f be       	out	0x3f, r0	; 63
 7e6:	cd bf       	out	0x3d, r28	; 61
 7e8:	df 91       	pop	r29
 7ea:	cf 91       	pop	r28
 7ec:	08 95       	ret

000007ee <_ZN6System8SPI_InitEv>:
 7ee:	cf 93       	push	r28
 7f0:	df 93       	push	r29
 7f2:	00 d0       	rcall	.+0      	; 0x7f4 <_ZN6System8SPI_InitEv+0x6>
 7f4:	00 d0       	rcall	.+0      	; 0x7f6 <_ZN6System8SPI_InitEv+0x8>
 7f6:	00 d0       	rcall	.+0      	; 0x7f8 <_ZN6System8SPI_InitEv+0xa>
 7f8:	cd b7       	in	r28, 0x3d	; 61
 7fa:	de b7       	in	r29, 0x3e	; 62
 7fc:	1d 82       	std	Y+5, r1	; 0x05
 7fe:	1c 82       	std	Y+4, r1	; 0x04
 800:	1b 82       	std	Y+3, r1	; 0x03
 802:	1a 82       	std	Y+2, r1	; 0x02
 804:	81 e0       	ldi	r24, 0x01	; 1
 806:	89 83       	std	Y+1, r24	; 0x01
 808:	86 e0       	ldi	r24, 0x06	; 6
 80a:	8e 83       	std	Y+6, r24	; 0x06
 80c:	be 01       	movw	r22, r28
 80e:	6f 5f       	subi	r22, 0xFF	; 255
 810:	7f 4f       	sbci	r23, 0xFF	; 255
 812:	85 e3       	ldi	r24, 0x35	; 53
 814:	91 e0       	ldi	r25, 0x01	; 1
 816:	0e 94 37 05 	call	0xa6e	; 0xa6e <_ZN9SPIPeriph4InitEP14SPIInitTypeDef>
 81a:	26 96       	adiw	r28, 0x06	; 6
 81c:	0f b6       	in	r0, 0x3f	; 63
 81e:	f8 94       	cli
 820:	de bf       	out	0x3e, r29	; 62
 822:	0f be       	out	0x3f, r0	; 63
 824:	cd bf       	out	0x3d, r28	; 61
 826:	df 91       	pop	r29
 828:	cf 91       	pop	r28
 82a:	08 95       	ret

0000082c <_ZN6System10Timer_InitEv>:
 82c:	14 bc       	out	0x24, r1	; 36
 82e:	83 e0       	ldi	r24, 0x03	; 3
 830:	85 bd       	out	0x25, r24	; 37
 832:	82 e0       	ldi	r24, 0x02	; 2
 834:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
 838:	8a ef       	ldi	r24, 0xFA	; 250
 83a:	87 bd       	out	0x27, r24	; 39
 83c:	08 95       	ret

0000083e <_ZN6System4InitEv>:
 83e:	cf 93       	push	r28
 840:	df 93       	push	r29
 842:	ec 01       	movw	r28, r24
 844:	0e 94 bd 03 	call	0x77a	; 0x77a <_ZN6System9GPIO_InitEv>
 848:	ce 01       	movw	r24, r28
 84a:	0e 94 c9 03 	call	0x792	; 0x792 <_ZN6System8I2C_InitEv>
 84e:	ce 01       	movw	r24, r28
 850:	0e 94 f7 03 	call	0x7ee	; 0x7ee <_ZN6System8SPI_InitEv>
 854:	ce 01       	movw	r24, r28
 856:	0e 94 16 04 	call	0x82c	; 0x82c <_ZN6System10Timer_InitEv>
 85a:	78 94       	sei
 85c:	df 91       	pop	r29
 85e:	cf 91       	pop	r28
 860:	08 95       	ret

00000862 <main>:

uint32_t timer;
uint8_t toggle;
Time tim;

int main(void){
 862:	cf 93       	push	r28
 864:	df 93       	push	r29
 866:	00 d0       	rcall	.+0      	; 0x868 <main+0x6>
 868:	1f 92       	push	r1
 86a:	cd b7       	in	r28, 0x3d	; 61
 86c:	de b7       	in	r29, 0x3e	; 62
	System.Init();
 86e:	84 e3       	ldi	r24, 0x34	; 52
 870:	91 e0       	ldi	r25, 0x01	; 1
 872:	0e 94 1f 04 	call	0x83e	; 0x83e <_ZN6System4InitEv>
	disp.Init();
 876:	8c e2       	ldi	r24, 0x2C	; 44
 878:	91 e0       	ldi	r25, 0x01	; 1
 87a:	0e 94 f5 04 	call	0x9ea	; 0x9ea <_ZN7MAX72194InitEv>
	
    while(1){
		Time timeNow;
		rtc.GetTime(&timeNow.Seconds, &timeNow.Minutes, &timeNow.Hours);
		if(timeNow.Seconds != tim.Seconds){
 87e:	08 e2       	ldi	r16, 0x28	; 40
 880:	11 e0       	ldi	r17, 0x01	; 1
			disp.Write(5, 1, timeNow.Seconds);
			toggle = !toggle;
 882:	f1 2c       	mov	r15, r1
	System.Init();
	disp.Init();
	
    while(1){
		Time timeNow;
		rtc.GetTime(&timeNow.Seconds, &timeNow.Minutes, &timeNow.Hours);
 884:	9e 01       	movw	r18, r28
 886:	2d 5f       	subi	r18, 0xFD	; 253
 888:	3f 4f       	sbci	r19, 0xFF	; 255
 88a:	ae 01       	movw	r20, r28
 88c:	4e 5f       	subi	r20, 0xFE	; 254
 88e:	5f 4f       	sbci	r21, 0xFF	; 255
 890:	be 01       	movw	r22, r28
 892:	6f 5f       	subi	r22, 0xFF	; 255
 894:	7f 4f       	sbci	r23, 0xFF	; 255
 896:	82 e3       	ldi	r24, 0x32	; 50
 898:	91 e0       	ldi	r25, 0x01	; 1
 89a:	0e 94 8c 00 	call	0x118	; 0x118 <_ZN6DS32317GetTimeEPhS0_S0_>
		if(timeNow.Seconds != tim.Seconds){
 89e:	29 81       	ldd	r18, Y+1	; 0x01
 8a0:	f8 01       	movw	r30, r16
 8a2:	80 81       	ld	r24, Z
 8a4:	28 17       	cp	r18, r24
 8a6:	71 f3       	breq	.-36     	; 0x884 <main+0x22>
			disp.Write(5, 1, timeNow.Seconds);
 8a8:	41 e0       	ldi	r20, 0x01	; 1
 8aa:	65 e0       	ldi	r22, 0x05	; 5
 8ac:	8c e2       	ldi	r24, 0x2C	; 44
 8ae:	91 e0       	ldi	r25, 0x01	; 1
 8b0:	0e 94 83 04 	call	0x906	; 0x906 <_ZN7MAX72195WriteEhhh>
			toggle = !toggle;
 8b4:	81 e0       	ldi	r24, 0x01	; 1
 8b6:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <toggle>
 8ba:	91 11       	cpse	r25, r1
 8bc:	8f 2d       	mov	r24, r15
 8be:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <toggle>
			
			tim.Seconds = timeNow.Seconds;
 8c2:	89 81       	ldd	r24, Y+1	; 0x01
 8c4:	f8 01       	movw	r30, r16
 8c6:	80 83       	st	Z, r24

int main(void){
	System.Init();
	disp.Init();
	
    while(1){
 8c8:	dd cf       	rjmp	.-70     	; 0x884 <main+0x22>

000008ca <_GLOBAL__sub_I_i2c>:
#define _I2CPeriph_H

#include <util/twi.h>
#include "I2CHandle.h"

struct I2CPeriph : public I2CHandleTypeDef {
 8ca:	e7 e3       	ldi	r30, 0x37	; 55
 8cc:	f1 e0       	ldi	r31, 0x01	; 1
 8ce:	84 e0       	ldi	r24, 0x04	; 4
 8d0:	91 e0       	ldi	r25, 0x01	; 1
 8d2:	91 83       	std	Z+1, r25	; 0x01
 8d4:	80 83       	st	Z, r24
#define _SPIPeriph_H

#include <avr/io.h>
#include "SPIHandle.h"

struct SPIPeriph : public SPIHandleTypeDef {
 8d6:	a5 e3       	ldi	r26, 0x35	; 53
 8d8:	b1 e0       	ldi	r27, 0x01	; 1
 8da:	80 e2       	ldi	r24, 0x20	; 32
 8dc:	91 e0       	ldi	r25, 0x01	; 1
 8de:	11 96       	adiw	r26, 0x01	; 1
 8e0:	9c 93       	st	X, r25
 8e2:	8e 93       	st	-X, r24
#define DS3231_AL2MODE_DayTimeMatch		0b1000

struct DS3231 {
public:
    DS3231(I2CHandleTypeDef *i2c) {
        i2cdev = i2c;
 8e4:	f0 93 33 01 	sts	0x0133, r31	; 0x800133 <rtc+0x1>
 8e8:	e0 93 32 01 	sts	0x0132, r30	; 0x800132 <rtc>
#define MAX7219_REG_DISPTEST	0x0F

struct MAX7219 {
public:
    MAX7219(SPIHandleTypeDef *SPIdev, uint8_t ChipStack, volatile uint8_t *csPORT, uint8_t csBIT) {
        dev = SPIdev;
 8ec:	ec e2       	ldi	r30, 0x2C	; 44
 8ee:	f1 e0       	ldi	r31, 0x01	; 1
 8f0:	b5 83       	std	Z+5, r27	; 0x05
 8f2:	a4 83       	std	Z+4, r26	; 0x04
        chipCnt = ChipStack;
 8f4:	84 e0       	ldi	r24, 0x04	; 4
 8f6:	80 83       	st	Z, r24
        csPort = csPORT;
 8f8:	85 e2       	ldi	r24, 0x25	; 37
 8fa:	90 e0       	ldi	r25, 0x00	; 0
 8fc:	92 83       	std	Z+2, r25	; 0x02
 8fe:	81 83       	std	Z+1, r24	; 0x01
        csBit = csBIT;
 900:	82 e0       	ldi	r24, 0x02	; 2
 902:	83 83       	std	Z+3, r24	; 0x03
 904:	08 95       	ret

00000906 <_ZN7MAX72195WriteEhhh>:
 *  Author: Arif Bryan
 */

#include "MAX7219.h"

void MAX7219::Write(uint8_t Chip, uint8_t Address, uint8_t Data) {
 906:	ef 92       	push	r14
 908:	ff 92       	push	r15
 90a:	0f 93       	push	r16
 90c:	1f 93       	push	r17
 90e:	cf 93       	push	r28
 910:	df 93       	push	r29
 912:	ec 01       	movw	r28, r24
 914:	06 2f       	mov	r16, r22
 916:	e4 2e       	mov	r14, r20
 918:	f2 2e       	mov	r15, r18
    if (Chip <= chipCnt) {Chip = chipCnt - Chip;}
 91a:	88 81       	ld	r24, Y
 91c:	86 17       	cp	r24, r22
 91e:	10 f0       	brcs	.+4      	; 0x924 <_ZN7MAX72195WriteEhhh+0x1e>
 920:	86 1b       	sub	r24, r22
 922:	08 2f       	mov	r16, r24
    *csPort &= ~(1 << csBit);
 924:	e9 81       	ldd	r30, Y+1	; 0x01
 926:	fa 81       	ldd	r31, Y+2	; 0x02
 928:	20 81       	ld	r18, Z
 92a:	81 e0       	ldi	r24, 0x01	; 1
 92c:	90 e0       	ldi	r25, 0x00	; 0
 92e:	0b 80       	ldd	r0, Y+3	; 0x03
 930:	02 c0       	rjmp	.+4      	; 0x936 <_ZN7MAX72195WriteEhhh+0x30>
 932:	88 0f       	add	r24, r24
 934:	99 1f       	adc	r25, r25
 936:	0a 94       	dec	r0
 938:	e2 f7       	brpl	.-8      	; 0x932 <_ZN7MAX72195WriteEhhh+0x2c>
 93a:	80 95       	com	r24
 93c:	82 23       	and	r24, r18
 93e:	80 83       	st	Z, r24
    for (uint8_t j = 0; j < chipCnt; j++) {
 940:	88 81       	ld	r24, Y
 942:	88 23       	and	r24, r24
 944:	f1 f1       	breq	.+124    	; 0x9c2 <_ZN7MAX72195WriteEhhh+0xbc>
 946:	10 e0       	ldi	r17, 0x00	; 0
        if (j == Chip || Chip > chipCnt) {dev->Transmit(Address);}
 948:	01 17       	cp	r16, r17
 94a:	11 f0       	breq	.+4      	; 0x950 <_ZN7MAX72195WriteEhhh+0x4a>
 94c:	80 17       	cp	r24, r16
 94e:	58 f4       	brcc	.+22     	; 0x966 <_ZN7MAX72195WriteEhhh+0x60>
 950:	8c 81       	ldd	r24, Y+4	; 0x04
 952:	9d 81       	ldd	r25, Y+5	; 0x05
 954:	dc 01       	movw	r26, r24
 956:	ed 91       	ld	r30, X+
 958:	fc 91       	ld	r31, X
 95a:	02 80       	ldd	r0, Z+2	; 0x02
 95c:	f3 81       	ldd	r31, Z+3	; 0x03
 95e:	e0 2d       	mov	r30, r0
 960:	6e 2d       	mov	r22, r14
 962:	09 95       	icall
 964:	0a c0       	rjmp	.+20     	; 0x97a <_ZN7MAX72195WriteEhhh+0x74>
        else {dev->Transmit(MAX7219_REG_NOOP);}
 966:	8c 81       	ldd	r24, Y+4	; 0x04
 968:	9d 81       	ldd	r25, Y+5	; 0x05
 96a:	dc 01       	movw	r26, r24
 96c:	ed 91       	ld	r30, X+
 96e:	fc 91       	ld	r31, X
 970:	02 80       	ldd	r0, Z+2	; 0x02
 972:	f3 81       	ldd	r31, Z+3	; 0x03
 974:	e0 2d       	mov	r30, r0
 976:	60 e0       	ldi	r22, 0x00	; 0
 978:	09 95       	icall
        while (!dev->IsTransmissionComplete());
 97a:	8c 81       	ldd	r24, Y+4	; 0x04
 97c:	9d 81       	ldd	r25, Y+5	; 0x05
 97e:	dc 01       	movw	r26, r24
 980:	ed 91       	ld	r30, X+
 982:	fc 91       	ld	r31, X
 984:	04 80       	ldd	r0, Z+4	; 0x04
 986:	f5 81       	ldd	r31, Z+5	; 0x05
 988:	e0 2d       	mov	r30, r0
 98a:	09 95       	icall
 98c:	88 23       	and	r24, r24
 98e:	a9 f3       	breq	.-22     	; 0x97a <_ZN7MAX72195WriteEhhh+0x74>
        dev->Transmit(Data);
 990:	8c 81       	ldd	r24, Y+4	; 0x04
 992:	9d 81       	ldd	r25, Y+5	; 0x05
 994:	dc 01       	movw	r26, r24
 996:	ed 91       	ld	r30, X+
 998:	fc 91       	ld	r31, X
 99a:	02 80       	ldd	r0, Z+2	; 0x02
 99c:	f3 81       	ldd	r31, Z+3	; 0x03
 99e:	e0 2d       	mov	r30, r0
 9a0:	6f 2d       	mov	r22, r15
 9a2:	09 95       	icall
        while (!dev->IsTransmissionComplete());
 9a4:	8c 81       	ldd	r24, Y+4	; 0x04
 9a6:	9d 81       	ldd	r25, Y+5	; 0x05
 9a8:	dc 01       	movw	r26, r24
 9aa:	ed 91       	ld	r30, X+
 9ac:	fc 91       	ld	r31, X
 9ae:	04 80       	ldd	r0, Z+4	; 0x04
 9b0:	f5 81       	ldd	r31, Z+5	; 0x05
 9b2:	e0 2d       	mov	r30, r0
 9b4:	09 95       	icall
 9b6:	88 23       	and	r24, r24
 9b8:	a9 f3       	breq	.-22     	; 0x9a4 <_ZN7MAX72195WriteEhhh+0x9e>
#include "MAX7219.h"

void MAX7219::Write(uint8_t Chip, uint8_t Address, uint8_t Data) {
    if (Chip <= chipCnt) {Chip = chipCnt - Chip;}
    *csPort &= ~(1 << csBit);
    for (uint8_t j = 0; j < chipCnt; j++) {
 9ba:	1f 5f       	subi	r17, 0xFF	; 255
 9bc:	88 81       	ld	r24, Y
 9be:	18 17       	cp	r17, r24
 9c0:	18 f2       	brcs	.-122    	; 0x948 <_ZN7MAX72195WriteEhhh+0x42>
        else {dev->Transmit(MAX7219_REG_NOOP);}
        while (!dev->IsTransmissionComplete());
        dev->Transmit(Data);
        while (!dev->IsTransmissionComplete());
    }
    *csPort |= (1 << csBit);
 9c2:	e9 81       	ldd	r30, Y+1	; 0x01
 9c4:	fa 81       	ldd	r31, Y+2	; 0x02
 9c6:	20 81       	ld	r18, Z
 9c8:	81 e0       	ldi	r24, 0x01	; 1
 9ca:	90 e0       	ldi	r25, 0x00	; 0
 9cc:	0b 80       	ldd	r0, Y+3	; 0x03
 9ce:	02 c0       	rjmp	.+4      	; 0x9d4 <_ZN7MAX72195WriteEhhh+0xce>
 9d0:	88 0f       	add	r24, r24
 9d2:	99 1f       	adc	r25, r25
 9d4:	0a 94       	dec	r0
 9d6:	e2 f7       	brpl	.-8      	; 0x9d0 <_ZN7MAX72195WriteEhhh+0xca>
 9d8:	82 2b       	or	r24, r18
 9da:	80 83       	st	Z, r24
}
 9dc:	df 91       	pop	r29
 9de:	cf 91       	pop	r28
 9e0:	1f 91       	pop	r17
 9e2:	0f 91       	pop	r16
 9e4:	ff 90       	pop	r15
 9e6:	ef 90       	pop	r14
 9e8:	08 95       	ret

000009ea <_ZN7MAX72194InitEv>:

void MAX7219::Init() {
 9ea:	0f 93       	push	r16
 9ec:	1f 93       	push	r17
 9ee:	cf 93       	push	r28
 9f0:	8c 01       	movw	r16, r24
    Write(chipCnt + 1, MAX7219_REG_SHUTDOWN, 0);
 9f2:	fc 01       	movw	r30, r24
 9f4:	60 81       	ld	r22, Z
 9f6:	6f 5f       	subi	r22, 0xFF	; 255
 9f8:	20 e0       	ldi	r18, 0x00	; 0
 9fa:	4c e0       	ldi	r20, 0x0C	; 12
 9fc:	0e 94 83 04 	call	0x906	; 0x906 <_ZN7MAX72195WriteEhhh>
    for (uint8_t i = 0; i < 8; i++) {
 a00:	c0 e0       	ldi	r28, 0x00	; 0
        Write(chipCnt + 1, i + 1, 0);
 a02:	cf 5f       	subi	r28, 0xFF	; 255
 a04:	f8 01       	movw	r30, r16
 a06:	60 81       	ld	r22, Z
 a08:	6f 5f       	subi	r22, 0xFF	; 255
 a0a:	20 e0       	ldi	r18, 0x00	; 0
 a0c:	4c 2f       	mov	r20, r28
 a0e:	c8 01       	movw	r24, r16
 a10:	0e 94 83 04 	call	0x906	; 0x906 <_ZN7MAX72195WriteEhhh>
    *csPort |= (1 << csBit);
}

void MAX7219::Init() {
    Write(chipCnt + 1, MAX7219_REG_SHUTDOWN, 0);
    for (uint8_t i = 0; i < 8; i++) {
 a14:	c8 30       	cpi	r28, 0x08	; 8
 a16:	a9 f7       	brne	.-22     	; 0xa02 <_ZN7MAX72194InitEv+0x18>
        Write(chipCnt + 1, i + 1, 0);
    }
    Write(chipCnt + 1, MAX7219_REG_SCANLIMIT, 7);
 a18:	f8 01       	movw	r30, r16
 a1a:	60 81       	ld	r22, Z
 a1c:	6f 5f       	subi	r22, 0xFF	; 255
 a1e:	27 e0       	ldi	r18, 0x07	; 7
 a20:	4b e0       	ldi	r20, 0x0B	; 11
 a22:	c8 01       	movw	r24, r16
 a24:	0e 94 83 04 	call	0x906	; 0x906 <_ZN7MAX72195WriteEhhh>
    Write(chipCnt + 1, MAX7219_REG_DISPTEST, 0);
 a28:	f8 01       	movw	r30, r16
 a2a:	60 81       	ld	r22, Z
 a2c:	6f 5f       	subi	r22, 0xFF	; 255
 a2e:	20 e0       	ldi	r18, 0x00	; 0
 a30:	4f e0       	ldi	r20, 0x0F	; 15
 a32:	c8 01       	movw	r24, r16
 a34:	0e 94 83 04 	call	0x906	; 0x906 <_ZN7MAX72195WriteEhhh>
    Write(chipCnt + 1, MAX7219_REG_INTENSITY, 7);
 a38:	f8 01       	movw	r30, r16
 a3a:	60 81       	ld	r22, Z
 a3c:	6f 5f       	subi	r22, 0xFF	; 255
 a3e:	27 e0       	ldi	r18, 0x07	; 7
 a40:	4a e0       	ldi	r20, 0x0A	; 10
 a42:	c8 01       	movw	r24, r16
 a44:	0e 94 83 04 	call	0x906	; 0x906 <_ZN7MAX72195WriteEhhh>
    Write(chipCnt + 1, MAX7219_REG_SHUTDOWN, 1);
 a48:	f8 01       	movw	r30, r16
 a4a:	60 81       	ld	r22, Z
 a4c:	6f 5f       	subi	r22, 0xFF	; 255
 a4e:	21 e0       	ldi	r18, 0x01	; 1
 a50:	4c e0       	ldi	r20, 0x0C	; 12
 a52:	c8 01       	movw	r24, r16
 a54:	0e 94 83 04 	call	0x906	; 0x906 <_ZN7MAX72195WriteEhhh>
}
 a58:	cf 91       	pop	r28
 a5a:	1f 91       	pop	r17
 a5c:	0f 91       	pop	r16
 a5e:	08 95       	ret

00000a60 <_ZN9SPIPeriph8TransmitEh>:
public:
	void Init(SPIInitTypeDef*);
	inline void Transmit(uint8_t data) {SPDR = data;}
 a60:	6e bd       	out	0x2e, r22	; 46
 a62:	08 95       	ret

00000a64 <_ZN9SPIPeriph7ReceiveEv>:
	inline uint8_t Receive() {return (SPDR);}
 a64:	8e b5       	in	r24, 0x2e	; 46
 a66:	08 95       	ret

00000a68 <_ZN9SPIPeriph22IsTransmissionCompleteEv>:
	inline uint8_t IsTransmissionComplete() {return (SPSR & (1 << SPIF));}
 a68:	8d b5       	in	r24, 0x2d	; 45
 a6a:	80 78       	andi	r24, 0x80	; 128
 a6c:	08 95       	ret

00000a6e <_ZN9SPIPeriph4InitEP14SPIInitTypeDef>:
#include "SPIPeriph.h"

void SPIPeriph::Init(SPIInitTypeDef *spiInit) {
 a6e:	fb 01       	movw	r30, r22
	SPCR = (spiInit->InterruptEnable << SPIE) | (1 << SPE) | (spiInit->DataAlign << DORD) | (spiInit->Mode << MSTR) |
			(spiInit->ClockPolarity << CPOL) | (spiInit->ClockPhase << CPHA) | ((spiInit->Prescaler & 0b011) << SPR0);
 a70:	25 81       	ldd	r18, Z+5	; 0x05
 a72:	23 70       	andi	r18, 0x03	; 3
 a74:	20 64       	ori	r18, 0x40	; 64
 a76:	91 81       	ldd	r25, Z+1	; 0x01
 a78:	30 e8       	ldi	r19, 0x80	; 128
 a7a:	93 9f       	mul	r25, r19
 a7c:	a0 01       	movw	r20, r0
 a7e:	11 24       	eor	r1, r1
 a80:	82 2f       	mov	r24, r18
 a82:	84 2b       	or	r24, r20
 a84:	92 81       	ldd	r25, Z+2	; 0x02
 a86:	40 e2       	ldi	r20, 0x20	; 32
 a88:	94 9f       	mul	r25, r20
 a8a:	90 01       	movw	r18, r0
 a8c:	11 24       	eor	r1, r1
 a8e:	28 2b       	or	r18, r24
 a90:	90 81       	ld	r25, Z
 a92:	30 e1       	ldi	r19, 0x10	; 16
 a94:	93 9f       	mul	r25, r19
 a96:	c0 01       	movw	r24, r0
 a98:	11 24       	eor	r1, r1
 a9a:	82 2b       	or	r24, r18
 a9c:	93 81       	ldd	r25, Z+3	; 0x03
 a9e:	99 0f       	add	r25, r25
 aa0:	99 0f       	add	r25, r25
 aa2:	99 0f       	add	r25, r25
 aa4:	89 2b       	or	r24, r25
 aa6:	94 81       	ldd	r25, Z+4	; 0x04
 aa8:	99 0f       	add	r25, r25
 aaa:	99 0f       	add	r25, r25
 aac:	89 2b       	or	r24, r25
 aae:	8c bd       	out	0x2c, r24	; 44
	SPSR = (((spiInit->Prescaler >> 2) & 1) << SPI2X);
 ab0:	85 81       	ldd	r24, Z+5	; 0x05
 ab2:	82 fb       	bst	r24, 2
 ab4:	88 27       	eor	r24, r24
 ab6:	80 f9       	bld	r24, 0
 ab8:	8d bd       	out	0x2d, r24	; 45
 aba:	08 95       	ret

00000abc <__udivmodsi4>:
 abc:	a1 e2       	ldi	r26, 0x21	; 33
 abe:	1a 2e       	mov	r1, r26
 ac0:	aa 1b       	sub	r26, r26
 ac2:	bb 1b       	sub	r27, r27
 ac4:	fd 01       	movw	r30, r26
 ac6:	0d c0       	rjmp	.+26     	; 0xae2 <__udivmodsi4_ep>

00000ac8 <__udivmodsi4_loop>:
 ac8:	aa 1f       	adc	r26, r26
 aca:	bb 1f       	adc	r27, r27
 acc:	ee 1f       	adc	r30, r30
 ace:	ff 1f       	adc	r31, r31
 ad0:	a2 17       	cp	r26, r18
 ad2:	b3 07       	cpc	r27, r19
 ad4:	e4 07       	cpc	r30, r20
 ad6:	f5 07       	cpc	r31, r21
 ad8:	20 f0       	brcs	.+8      	; 0xae2 <__udivmodsi4_ep>
 ada:	a2 1b       	sub	r26, r18
 adc:	b3 0b       	sbc	r27, r19
 ade:	e4 0b       	sbc	r30, r20
 ae0:	f5 0b       	sbc	r31, r21

00000ae2 <__udivmodsi4_ep>:
 ae2:	66 1f       	adc	r22, r22
 ae4:	77 1f       	adc	r23, r23
 ae6:	88 1f       	adc	r24, r24
 ae8:	99 1f       	adc	r25, r25
 aea:	1a 94       	dec	r1
 aec:	69 f7       	brne	.-38     	; 0xac8 <__udivmodsi4_loop>
 aee:	60 95       	com	r22
 af0:	70 95       	com	r23
 af2:	80 95       	com	r24
 af4:	90 95       	com	r25
 af6:	9b 01       	movw	r18, r22
 af8:	ac 01       	movw	r20, r24
 afa:	bd 01       	movw	r22, r26
 afc:	cf 01       	movw	r24, r30
 afe:	08 95       	ret

00000b00 <__tablejump2__>:
 b00:	ee 0f       	add	r30, r30
 b02:	ff 1f       	adc	r31, r31
 b04:	05 90       	lpm	r0, Z+
 b06:	f4 91       	lpm	r31, Z
 b08:	e0 2d       	mov	r30, r0
 b0a:	09 94       	ijmp

00000b0c <_exit>:
 b0c:	f8 94       	cli

00000b0e <__stop_program>:
 b0e:	ff cf       	rjmp	.-2      	; 0xb0e <__stop_program>
